section.center data-background="#000"
  h1.white Enumerator

section.center data-background="#000"
  h2.white Questions

section.center
  p What is Enumerable?

section.center
  p What is a side effect?

section.center
  p When do we use #each?

section.center
  p What is #collect and when do we use it?

section.center
  p What is #select and when do we use it?

section.center
  p What is #reduce and when do we use it?

section.center
  p What is a proc?

section.center
  p What is a lambda?

section.center
  p What is the difference between proc and lambda?

section.center
  p What is the return type of Hash#map?

section.center
  p What is the return type of Hash#select?

section.center
  p What is the difference between Array#map and Array#map!?

section.center
  p What is a bang method and what does we use it for?

section.center data-background="#000"
  p.white What should #each return when no block is given?

section
  h2 Enumerator
  p An <a href="http://c2.com/cgi/wiki?ExternalIterator">External Iterator</a>  is an object that represents a location within a collection.

section
  h2 Enumerator
  p They are used in conjunction with a loop to traverse all the elements in the collection.

section
  h2 Enumerator
  p Each iteration of the loop contains a statement that increments the logical position of the object within the collection.

section
  h2 Enumerator
  p The rest of the instructions in the loop body can use the External Iterator to examine and, often, change the contents of the collection at the location it represents.

section data-background="#000"
  h2.white Enumerable
  p.white On the other side, Enumerable is an <a class="white" href="http://c2.com/cgi/wiki?InternalIterator">Internal Iterator</a>.

section data-background="#000"
  h2.white Enumerable
  p.white An Internal Iterator is a higher order function that takes a collection and a function and applies the function to every element of the collection.

section data-background="#000"
  h2.white Enumerable
  p.white Usually the Internal Iterator is a member function of the collection and so doesn't require a specific collection parameter.

section data-background="#000"
  h2.white Enumerable
  p.white The function parameter takes a single argument of the same type as the members of the collection.

section.center
  img.inline src="img/troll.png"

section.center
  pre: code.ruby
    '
      class Hash
        # Returns a new hash with the results of running +block+ once for every value.
        # The keys are unchanged.
        #
        #   { a: 1, b: 2, c: 3 }.transform_values { |x| x * 2 }
        #   # => { a: 2, b: 4, c: 6 }
        def transform_values
          return enum_for(:transform_values) unless block_given?
          result = self.class.new
          each do |key, value|
            result[key] = yield(value)
          end
          result
        end
      end
